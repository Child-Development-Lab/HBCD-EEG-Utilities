%% Generating ERP Summary Statistics and Trial Measures information for HBCD data release
% This code is provided by the HBCD EEG Core team at the Child Development Lab, University of Maryland, College Park
% This code is provided to be used in conjunction to the MADE pipeline
% derivatives downloadable from the HBCD publically released data

% Before using this code, please refer to the HBCD documentation available
% at this link: INSERT LINK HERE

% Ongoing Contributors:
% Trisha Maheshwari (tmahesh@umd.edu)
% Whitney Kasenetz (kazenetz@umd.edu)
% Savannah McNair (smcnair1@umd.edu)
% For specific questions, contact eeghelp@umd.edu


% This code uses EEGLAB toolbox and some of its plugins. Before running the pipeline, you have to install the following:
% EEGLab:  https://sccn.ucsd.edu/eeglab/downloadtoolbox.php/download.php
% addpath(genpath(('...')) % Enter the path of the EEGLAB folder in this line


% %% TM- testing!
% % remove all summary stats files from cbrain outputs for testing
% datafile_names=dir(fullfile(data_path, '**\*SummaryStats.csv'));
% for k=1:length(datafile_names)
%     delete([datafile_names(k).folder filesep datafile_names(k).name]);
% end
% datafile_names=dir(fullfile(data_path, '**\*ERPTrialMeasures.csv'));
% for k=1:length(datafile_names)
%     delete([datafile_names(k).folder filesep datafile_names(k).name]);
% end


%% Set your paths here!
%Downloadable from the Github page, you can change this path to be wherever you have saved it!
json_settings_file = 'C:\Users\tmahesh\Documents\GitHub\HBCD-EEG-Utilities\supplemental files\proc_settings_HBCD.json'; 
%This file is necessary, it will set up all time windows, ERP directions,
%and ROIs-- please make sure you download the file from the Github page
%before running
task_list = {'FACE', 'MMN', 'VEP', 'RS'};
% This task list is auto-set to all tasks, if you would like to remove
% tasks please follow the formatting above to indicate the tasks you want
% to keep
addpath 'C:\Users\tmahesh\Documents\GitHub\HBCD-EEG-Utilities\supplemental files';
% Please add the path for the supplemental files here


data_path = 'X:\Projects\hbcd\EEG\Main_Study\CBRAIN_Outputs\DataReleaseIDs'; %Set to where your data is saved after downloading
%output_location = 'Z:\Dropboxes\tmahesh\test outputs for new sumstats+trialmeas\Concatenated files'; %Set to where you would like your outputs, ideally a new folder saved somewhere you remember!
concat_location = 'Z:\Dropboxes\tmahesh\test outputs for new sumstats+trialmeas\Concatenated files'; %Set to where you would like your concatenated outputs, ideally a new folder saved somewhere you remember!
age_info = ''; %Set to where you have the scans.tsv files located, may be the same as the data_path
addpath 'Z:\HBCD\7. Undergrads\eeglab2023.0'; %Add your eeglab plugin path here
eeglab;

%% Here we will read in all the processed set files and ID paths
cd(data_path);
datafile_names=dir(fullfile(data_path, '**\*filteredprocessed_eeg.set'));
datafile_names=datafile_names(~ismember({datafile_names.name},{'.', '..', '.DS_Store'}));
% datafile_names=datafile_names(~(contains({datafile_names.name}, 'RS')));
% %keep RS for spectra/SME calculations!
%datafile_names(235) = []; % This participant file has unknown errors that the EEG Core is troubleshooting
set_names={datafile_names.name};
set_path = {datafile_names.folder};

%Filter out which tasks you have selected
for c=length(set_names):-1:1
    task = extractBetween(set_names{c}, 'task-', '_acq');
    if ~contains(task_list, task)
        %remove the file
        datafile_names(c) = [];
    end
end
%remake the new list of filtered files
set_names={datafile_names.name};
set_path = {datafile_names.folder};


%% Generate tables here
% Run a loop for each set file to create output tables - if everything is
% set up as expected, you should be able to just run this all together!
pIdx = 0;
allData = [];
cutoff = 0;
TrialNums = [];
EEG=eeg_checkset(EEG);
for subject=126:length(set_names)
    s = grab_settings(set_names{subject}, json_settings_file);
    participant_Id = set_names{subject}(1:14); %Get ID for data path to read set file
    output_location = [data_path filesep participant_Id filesep 'ses-V03' filesep 'eeg' filesep 'processed_data'];
    % TM - saves to the correct file structure that we expect to see --
    % this line can be commented out if you want to save it to the output
    % location set above

    % RS Code here, if RS call other function, otherwise continue to next
    % subject
    if contains(set_names{subject}, 'RS')
        % Run RS separate script
        continue
    end


    % % ADD IN AGE INFO HERE!!! - test TM when real scans.tsv drops
    % try
    %     % on cbrain, look for scans.tsv
    %     tsvpath= [data_path filesep participant_Id filesep 'ses-V03'];
    %     agetable = readtable([tsvpath filesep participant_label '_ses-V03_scans.tsv'],"Filetype","text",'Delimiter','\t');
    %     try
    %         taskages=agetable.age(contains(agetable.filename,'eeg'));
    %         age = taskages(1)*12;   
    %     catch
    %         error("Age data is missing!")
    %     end
    % 
    % catch
    %     %default to older age bin if age scans.tsv file is missing!
    %     age = 7;
    % end


    %TEST CODE TO MAKE SURE IT WORKS - TM
    sumname = extractBefore(set_names{subject}, '_acq-eeg');
    task = extractBetween(set_names{subject}, 'task-', '_acq');
    agetab = readtable('C:\Users\tmahesh\Downloads\age_bin_information.xlsx');
    idx = find(strcmp(agetab.Subject_IDS, participant_Id));
    age_bin = agetab.Younger_Older(idx);
    if strcmp(age_bin, 'younger')
        age = 4;
    elseif strcmp(age_bin, 'older')
        age = 7;
    else
        age = 7; %one participant default to older bin
    end

    age_bin = 1;
    in_range = 0;
    scoreROIs = s.score_ROIs;
    scoreAges = s.score_ages;
    erp_dirs = s.ERP_dirs; %NEW TM

    if isempty(scoreAges)
        %Assert that the correct number of parameters are present
        scoreTimes = s.score_times;
        assert(length(scoreTimes)== length(scoreROIs), "Must have the same number of score times and ROIs!")
        
    else
        age_bin = 1;
        in_range = 0;
        for i=1:length(scoreAges)
            agemin = scoreAges(i,1);
            agemax = scoreAges(i,2);
            
            if age >= agemin && age < agemax
                age_bin = i;
                in_range = 1;
                break
            end    
            
        end 
        if in_range==0
            if age < scoreAges(1,1)
                age_bin=1;
        
            else
                age_bin=2;
            end
        end
    
        if age_bin == 1
            scoreTimes = s.score_times1;
        elseif age_bin == 2
            scoreTimes = s.score_times2;
        end
    end


    TrialNums(subject).Subject = set_names{subject};
    %load the preprocessed file
    EEG = pop_loadset('filename', strrep(set_names{subject}, '.set', '.set'),'filepath', set_path{subject} );
    EEG = eeg_checkset(EEG);
    
for i=1:length(scoreTimes)
    %select time window of interest
    scoreTime = scoreTimes(i,:);
    PeakStart = scoreTime(1);
    PeakEnd = scoreTime(2);

    direction = erp_dirs(i); %NEW TM

    PeakRange = find(EEG.times == PeakStart):find(EEG.times == PeakEnd);

    %select ROI
        Cluster = scoreROIs{i};
        ROI = get_Cluster(Cluster);

    if isempty(ROI)
        ROI = {EEG.chanlocs.labels}; %default to all channels
    end

    roi_ind = find(ismember({EEG.chanlocs.labels},ROI));

    if contains(set_names{subject}, 'FACE')
        %directions = [-1, -1, 1, -1, 1, -1];
        %direction = directions(i);
        tab=[];
        tab2=[];
        tab3=[];
        tab4=[];
        conditions = unique({EEG.event.Condition}); %check which conditions exist
        if sum(contains(conditions, '1'))==1
            EEG_ui = pop_selectevent(EEG, 'Condition', '1', 'deleteevents','on'); %select only uprightInv trials
            EEG_ui = eeg_checkset(EEG_ui);
            if EEG_ui.trials == 1 %exception for when there is only one trial retained for this condition
                EEG_ui_trialnums = {EEG_ui.event.TrialNum}';
                EEG_ui_roi = squeeze(mean(EEG_ui.data(roi_ind, :,:),1)); %select and average across channels of interest
                EEG_ui_peak = squeeze(mean(EEG_ui_roi(PeakRange))); %select and average across timerange of interest
                Scores = EEG_ui_peak';

                tab = array2table(Scores); %make table
                tab = renamevars(tab,["Scores"], ['MeanAmplitude_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]); %label table


                % Insert peak latency function here
                [AvgPeakScores, PeakLatencies] =  compute_peaks_latencies(EEG_ui, PeakRange, roi_ind, direction);%NEW TM
                %tab.(['Peak_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = AvgPeakScores;
                %tab.(['Latency_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = PeakLatencies;

                tab.Condition(:) = "uprightInv"; %add condition variable
                tab.("TrialNum") = EEG_ui_trialnums; %add trial num variable
            else
                EEG_ui_trialnums = {EEG_ui.event.TrialNum}';
                EEG_ui_roi = squeeze(mean(EEG_ui.data(roi_ind, :,:),1)); %select and average across channels of interest
                EEG_ui_peak = squeeze(mean(EEG_ui_roi(PeakRange, :),1)); %select and average across timerange of interest
                Scores = EEG_ui_peak';
                tab = array2table(Scores); %make table
                tab = renamevars(tab,["Scores"], ['MeanAmplitude_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]); %label table

                % Insert peak latency function here
                [AvgPeakScores, PeakLatencies] =  compute_peaks_latencies(EEG_ui, PeakRange, roi_ind, direction);%NEW TM
                %tab.(['Peak_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = AvgPeakScores;
                %tab.(['Latency_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = PeakLatencies;

                tab.Condition(:) = "uprightInv"; %add condition variable
                tab.("TrialNum") = EEG_ui_trialnums; %add trial num variable
            end
        end

        if sum(contains(conditions, '2'))==1
            EEG_i = pop_selectevent(EEG, 'Condition', '2', 'deleteevents','on'); %select only inverted trials
            EEG_i = eeg_checkset(EEG_i);
            if EEG_i.trials == 1
                EEG_i_trialnums = {EEG_i.event.TrialNum}';
                EEG_i_roi = squeeze(mean(EEG_i.data(roi_ind, :,:),1)); %select and average across channels of interest
                EEG_i_peak = squeeze(mean(EEG_i_roi(PeakRange))); %select and average across timerange of interest
                Scores = EEG_i_peak';
                tab2 = array2table(Scores); %make table
                tab2 = renamevars(tab2,["Scores"], ['MeanAmplitude_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]); %label table

                % Insert peak latency function here
                [AvgPeakScores, PeakLatencies] =  compute_peaks_latencies(EEG_i, PeakRange, roi_ind, direction);%NEW TM
                %tab2.(['Peak_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = AvgPeakScores;
                %tab2.(['Latency_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = PeakLatencies;


                tab2.Condition(:) = "inverted"; %add condition variable
                tab2.("TrialNum") = EEG_i_trialnums; %add trial num variable
            else
                EEG_i_trialnums = {EEG_i.event.TrialNum}';
                EEG_i_roi = squeeze(mean(EEG_i.data(roi_ind, :,:),1)); %select and average across channels of interest
                EEG_i_peak = squeeze(mean(EEG_i_roi(PeakRange, :),1)); %select and average across timerange of interest
                Scores = EEG_i_peak';
                tab2 = array2table(Scores); %make table
                tab2 = renamevars(tab2,["Scores"], ['MeanAmplitude_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]); %label table

                % Insert peak latency function here
                [AvgPeakScores, PeakLatencies] =  compute_peaks_latencies(EEG_i, PeakRange, roi_ind, direction);%NEW TM
                %tab2.(['Peak_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = AvgPeakScores;
                %tab2.(['Latency_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = PeakLatencies;


                tab2.Condition(:) = "inverted"; %add condition variable
                tab2.("TrialNum") = EEG_i_trialnums;
            end
        end

        if sum(contains(conditions, '3'))==1
            EEG_o = pop_selectevent(EEG, 'Condition', '3', 'deleteevents','on'); %select only object trials
            EEG_o = eeg_checkset(EEG_o);
            if EEG_o.trials == 1
                EEG_o_trialnums = {EEG_o.event.TrialNum}';
                EEG_o_roi = squeeze(mean(EEG_o.data(roi_ind, :,:),1)); %select and average across channels of interest
                EEG_o_peak = squeeze(mean(EEG_o_roi(PeakRange))); %select and average across timerange of interest
                Scores = EEG_o_peak';
                tab3 = array2table(Scores); %make table
                tab3 = renamevars(tab3,["Scores"], ['MeanAmplitude_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]); %label table

                % TODO: Insert peak latency function here
                [AvgPeakScores, PeakLatencies] =  compute_peaks_latencies(EEG_o, PeakRange, roi_ind, direction);%NEW TM
                %tab3.(['Peak_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = AvgPeakScores;
                %tab3.(['Latency_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = PeakLatencies;


                tab3.Condition(:) = "object"; %add condition variable
                tab3.("TrialNum") = EEG_o_trialnums; %add trial num variable
            else
                EEG_o_trialnums = {EEG_o.event.TrialNum}';
                EEG_o_roi = squeeze(mean(EEG_o.data(roi_ind, :,:),1)); %select and average across channels of interest
                EEG_o_peak = squeeze(mean(EEG_o_roi(PeakRange, :),1)); %select and average across timerange of interest
                Scores = EEG_o_peak';
                tab3 = array2table(Scores); %make table
                tab3 = renamevars(tab3,["Scores"], ['MeanAmplitude_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]); %label table

                % Insert peak latency function here
                [AvgPeakScores, PeakLatencies] =  compute_peaks_latencies(EEG_o, PeakRange, roi_ind, direction);%NEW TM
                %tab3.(['Peak_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = AvgPeakScores;
                %tab3.(['Latency_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = PeakLatencies;


                tab3.Condition(:) = "object"; %add condition variable
                tab3.("TrialNum") = EEG_o_trialnums;
            end
        end

        if sum(contains(conditions, '4'))==1
            EEG_uo = pop_selectevent(EEG, 'Condition', '4', 'deleteevents','on'); %select only uprightObj trials
            EEG_uo = eeg_checkset(EEG_uo);
            if EEG_uo.trials == 1
                EEG_uo_trialnums = {EEG_uo.event.TrialNum}';
                EEG_uo_roi = squeeze(mean(EEG_uo.data(roi_ind, :,:),1)); %select and average across channels of interest
                EEG_uo_peak = squeeze(mean(EEG_uo_roi(PeakRange))); %select and average across timerange of interest
                Scores = EEG_uo_peak';
                tab4 = array2table(Scores); %make table
                tab4 = renamevars(tab4,["Scores"], ['MeanAmplitude_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]); %label table

                %Insert peak latency function here
                [AvgPeakScores, PeakLatencies] =  compute_peaks_latencies(EEG_uo, PeakRange, roi_ind, direction);%NEW TM
                %tab4.(['Peak_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = AvgPeakScores;
                %tab4.(['Latency_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = PeakLatencies;


                tab4.Condition(:) = "uprightObj"; %add condition variable
                tab4.("TrialNum") = EEG_uo_trialnums; %add trial num variable
            else
                EEG_uo_trialnums = {EEG_uo.event.TrialNum}';
                EEG_uo_roi = squeeze(mean(EEG_uo.data(roi_ind, :,:),1)); %select and average across channels of interest
                EEG_uo_peak = squeeze(mean(EEG_uo_roi(PeakRange, :),1)); %select and average across timerange of interest
                Scores = EEG_uo_peak';
                tab4 = array2table(Scores); %make table
                tab4 = renamevars(tab4,["Scores"], ['MeanAmplitude_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]); %label table

                % Insert peak latency function here
                [AvgPeakScores, PeakLatencies] =  compute_peaks_latencies(EEG_uo, PeakRange, roi_ind, direction);%NEW TM
                %tab4.(['Peak_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = AvgPeakScores;
                %tab4.(['Latency_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = PeakLatencies;


                tab4.Condition(:) = "uprightObj"; %add condition variable
                tab4.("TrialNum") = EEG_uo_trialnums;
            end
        end

        tabFull = [tab; tab2; tab3; tab4;];
        tabFull.ID(:) = convertCharsToStrings(participant_Id);

    elseif contains(set_names{subject}, 'MMN')
        directions = [1, 1, 1];
        direction = directions(i);
        tab=[];
        tab2=[];
        tab3=[];

        conditions = unique({EEG.event.Condition}); %check which conditions exist

        if sum(contains(conditions, '1'))==1
            EEG_s = pop_selectevent(EEG, 'Condition', '1', 'deleteevents','on'); %select only standard trials
            EEG_s = eeg_checkset(EEG_s);
            if EEG_s.trials == 1 %exception for when there is only one trial retained for this condition
                EEG_s_trialnums = {EEG_s.event.TrialNum}';
                EEG_s_roi = squeeze(mean(EEG_s.data(roi_ind, :,:),1)); %select and average across channels of interest
                EEG_s_peak = squeeze(mean(EEG_s_roi(PeakRange))); %select and average across timerange of interest
                Scores = EEG_s_peak';
                tab = array2table(Scores); %make table
                tab = renamevars(tab,["Scores"], ['MeanAmplitude_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]); %label table

                % Insert peak latency function here
                [AvgPeakScores, PeakLatencies] =  compute_peaks_latencies(EEG_s, PeakRange, roi_ind, direction);%NEW TM
                %tab.(['Peak_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = AvgPeakScores;
                %tab.(['Latency_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = PeakLatencies;


                tab.Condition(:) = "standard"; %add condition variable
                tab.("TrialNum") = EEG_s_trialnums;
            else
                EEG_s_trialnums = {EEG_s.event.TrialNum}';
                EEG_s_roi = squeeze(mean(EEG_s.data(roi_ind, :,:),1)); %select and average across channels of interest
                EEG_s_peak = squeeze(mean(EEG_s_roi(PeakRange, :),1)); %select and average across timerange of interest
                Scores = EEG_s_peak';
                tab = array2table(Scores); %make table
                tab = renamevars(tab,["Scores"], ['MeanAmplitude_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]); %label table

                % Insert peak latency function here
                [AvgPeakScores, PeakLatencies] =  compute_peaks_latencies(EEG_s, PeakRange, roi_ind, direction);%NEW TM
                %tab.(['Peak_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = AvgPeakScores;
                %tab.(['Latency_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = PeakLatencies;


                tab.Condition(:) = "standard"; %add condition variable
                tab.("TrialNum") = EEG_s_trialnums;
            end
        end

        if sum(contains(conditions, '2'))==1
            EEG_p = pop_selectevent(EEG, 'Condition', '2', 'deleteevents','on'); %select only predeviant trials
            EEG_p = eeg_checkset(EEG_p);
            if EEG_p.trials == 1
                EEG_p_trialnums = {EEG_p.event.TrialNum}';
                EEG_p_roi = squeeze(mean(EEG_p.data(roi_ind, :,:),1)); %select and average across channels of interest
                EEG_p_peak = squeeze(mean(EEG_p_roi(PeakRange))); %select and average across timerange of interest
                Scores = EEG_p_peak';
                tab2 = array2table(Scores); %make table
                tab2 = renamevars(tab2,["Scores"], ['MeanAmplitude_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]); %label table

                % Insert peak latency function here
                [AvgPeakScores, PeakLatencies] =  compute_peaks_latencies(EEG_p, PeakRange, roi_ind, direction);%NEW TM
                %tab2.(['Peak_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = AvgPeakScores;
                %tab2.(['Latency_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = PeakLatencies;


                tab2.Condition(:) = "predeviant"; %add condition variable
                tab2.("TrialNum") = EEG_p_trialnums;
            else
                EEG_p_trialnums = {EEG_p.event.TrialNum}';
                EEG_p_roi = squeeze(mean(EEG_p.data(roi_ind, :,:),1)); %select and average across channels of interest
                EEG_p_peak = squeeze(mean(EEG_p_roi(PeakRange, :),1)); %select and average across timerange of interest
                Scores = EEG_p_peak';
                tab2 = array2table(Scores); %make table
                tab2 = renamevars(tab2,["Scores"], ['MeanAmplitude_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]); %label table

                % Insert peak latency function here
                [AvgPeakScores, PeakLatencies] =  compute_peaks_latencies(EEG_p, PeakRange, roi_ind, direction);%NEW TM
                %tab2.(['Peak_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = AvgPeakScores;
                %tab2.(['Latency_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = PeakLatencies;


                tab2.Condition(:) = "predeviant"; %add condition variable
                tab2.("TrialNum") = EEG_p_trialnums;
            end
        end

        if sum(contains(conditions, '3'))==1
            EEG_d = pop_selectevent(EEG, 'Condition', '3', 'deleteevents','on'); %select only deviant trials
            EEG_d = eeg_checkset(EEG_d);
            if EEG_d.trials == 1
                EEG_d_trialnums = {EEG_d.event.TrialNum}';
                EEG_d_roi = squeeze(mean(EEG_d.data(roi_ind, :,:),1)); %select and average across channels of interest
                EEG_d_peak = squeeze(mean(EEG_d_roi(PeakRange))); %select and average across timerange of interest
                Scores = EEG_d_peak';
                tab3 = array2table(Scores); %make table
                tab3 = renamevars(tab3,["Scores"], ['MeanAmplitude_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]); %label table

                % Insert peak latency function here
                [AvgPeakScores, PeakLatencies] =  compute_peaks_latencies(EEG_d, PeakRange, roi_ind, direction);%NEW TM
                %tab3.(['Peak_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = AvgPeakScores;
                %tab3.(['Latency_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = PeakLatencies;


                tab3.Condition(:) = "deviant"; %add condition variable
                tab3.("TrialNum") = EEG_d_trialnums;
            else
                EEG_d_trialnums = {EEG_d.event.TrialNum}';
                EEG_d_roi = squeeze(mean(EEG_d.data(roi_ind, :,:),1)); %select and average across channels of interest
                EEG_d_peak = squeeze(mean(EEG_d_roi(PeakRange, :),1)); %select and average across timerange of interest
                Scores = EEG_d_peak';
                tab3 = array2table(Scores); %make table
                tab3 = renamevars(tab3,["Scores"], ['MeanAmplitude_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]); %label table

                % Insert peak latency function here
                [AvgPeakScores, PeakLatencies] =  compute_peaks_latencies(EEG_d, PeakRange, roi_ind, direction);%NEW TM
                %tab3.(['Peak_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = AvgPeakScores;
                %tab3.(['Latency_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = PeakLatencies;


                tab3.Condition(:) = "deviant"; %add condition variable
                tab3.("TrialNum") = EEG_d_trialnums;
            end
        end

        tabFull = [tab; tab2; tab3];
        tabFull.ID(:) = convertCharsToStrings(participant_Id);

    elseif contains(set_names{subject}, 'VEP')
        directions = [-1, 1, -1];
        direction = directions(i);
        EEG_v = pop_selectevent(EEG, 'Condition', '1', 'deleteevents','on');
        EEG_v = eeg_checkset(EEG_v);
        if EEG_v.trials == 1
            EEG_v_trialnums = {EEG_v.event.TrialNum}';
            EEG_v_roi = squeeze(mean(EEG_v.data(roi_ind, :,:),1)); %select and average across channels of interest
            EEG_v_peak = squeeze(mean(EEG_v_roi(PeakRange))); %select and average across timerange of interest
            Scores = EEG_v_peak';
            tab = array2table(Scores); %make table
            tab = renamevars(tab,["Scores"], ['MeanAmplitude_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]); %label table

            % Insert peak latency function here
            [AvgPeakScores, PeakLatencies] =  compute_peaks_latencies(EEG_v, PeakRange, roi_ind, direction);%NEW TM
            tab.(['Peak_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = AvgPeakScores;
            tab.(['Latency_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = PeakLatencies;


            tab.("TrialNum") = EEG_v_trialnums;
            tab.Condition(:) = "vep";
            tabFull = tab;
            tabFull.ID(:) = convertCharsToStrings(participant_Id);
        else
            EEG_v_trialnums = {EEG_v.event.TrialNum}';
            EEG_v_roi = squeeze(mean(EEG_v.data(roi_ind, :,:),1)); %select and average across channels of interest
            EEG_v_peak = squeeze(mean(EEG_v_roi(PeakRange, :),1)); %select and average across timerange of interest
            Scores = EEG_v_peak';
            tab = array2table(Scores); %make table
            tab = renamevars(tab,["Scores"], ['MeanAmplitude_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]); %label table

            % Insert peak latency function here
            [AvgPeakScores, PeakLatencies] =  compute_peaks_latencies(EEG_v, PeakRange, roi_ind, direction);%NEW TM
            tab.(['AdaptiveMean_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = AvgPeakScores;
            tab.(['Latency_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = PeakLatencies;


            tab.("TrialNum") = EEG_v_trialnums;
            tab.Condition(:) = "vep";
            tabFull = tab;
            tabFull.ID(:) = convertCharsToStrings(participant_Id);
        end

    else
        error("Not a scoreable task!")
    end

    %writetable(tabFull, [output_location filesep participant_label '_' session_label '_task-' task '_' num2str(PeakStart) '-' num2str(PeakEnd) '_ERP-Scores.csv']);

    tabFull = convertvars(tabFull,["Condition"],"categorical");
    % Group-wise sme calculations
    conditions2 = cellstr(unique(tabFull.Condition, 'stable'));
    sme = grpstats(tabFull, 'Condition', {@(x) std(x)/sqrt(numel(x))}, 'DataVars', ['MeanAmplitude_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]);
    sme.Properties.VariableNames{3} = ['SME_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)];
    %sme(cellstr(conditions2), :) = sme
    [X,Y] = ismember(sme.Condition, conditions2);
    [~,Z] = sort(Y);
    sme2 = sme(Z,:);
    sme = sme2;


    ncond = height(sme);
    peakVals = zeros(ncond, 1);
    latVals = zeros(ncond, 1);
    meanVals = zeros(ncond, 1);
    conditions1 = unique({EEG.event.Condition}); %check which conditions exist
    
    for c=1:ncond
        EEG_c = pop_selectevent(EEG, 'Condition', conditions1{c}, 'deleteevents','on'); %select only inverted trials
        EEG_c = eeg_checkset(EEG_c);

        EEG_c_roi = squeeze(mean(EEG_c.data(roi_ind, :,:),1)); %select and average across channels of interest
        EEG_c_mean = mean(EEG_c_roi,2);
        EEG_roi_tw = EEG_c_mean(PeakRange);
        if direction==1
            EEG_peak_value = max(EEG_roi_tw);
        elseif direction==-1
            EEG_peak_value = min(EEG_roi_tw);
        end
       
        
        peak_index = find(EEG_c_mean== EEG_peak_value,1);
        peak_latency = EEG.times(peak_index);
        
        sd = fix(std(EEG.times));
    
        peakav_start = find(EEG.times == peak_latency-sd);
        peakav_end = find(EEG.times == peak_latency+sd);

        if isempty(peakav_start)
            peakav_start = 1;
    
        elseif isempty(peakav_end)
            peakav_end = length(EEG.times);
    
        end
    
        AvgPeakRange = peakav_start:peakav_end;
    
        avg_peak_value = mean(EEG_c_mean(AvgPeakRange));

        mean_value = mean(EEG_c_mean(PeakRange));

        peakVals(c) = avg_peak_value;
        latVals(c) = peak_latency;
        meanVals(c) = mean_value;

    end
    
    if contains(set_names{subject}, 'FACE')
        sme.(['MeanAmp_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = meanVals;
    elseif contains(set_names{subject}, 'MMN')
        % add row for MMR
        sme.(['MeanAmp_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = meanVals;
    else
        sme.(['AdaptiveMean_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = peakVals;
        sme.(['Latency_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = latVals;
        sme.(['MeanAmp_' num2str(PeakStart) '-' num2str(PeakEnd) '_' char(Cluster)]) = meanVals;
    end

    if i==1
        smeWide = sme;
        tabWide = tabFull;
    else
        smeWide = join(smeWide, sme);
        try
            tabWide = join(tabWide, tabFull, 'Keys','TrialNum');
        catch
            % One participant has error in trial num -- catch and fix the
            % error here
            continue %continue past error and skip subject
            % tabWide.TrialNum{78} = '94';
            % tabFull.TrialNum{78} = '94';
            % tabWide = join(tabWide, tabFull, 'Keys','TrialNum');
        end
    end

end    

smeWide.Properties.VariableNames{2} = 'NTrials';
writetable(smeWide, [output_location filesep strrep(set_names{subject}, '_desc-filteredprocessed_eeg.set', '_ERPSummaryStats.csv')]);
writetable(tabWide, [output_location filesep strrep(set_names{subject}, '_desc-filteredprocessed_eeg.set', '_ERPTrialMeasures.csv')]);

end %subject loop
        


%% Concatenate files for SummaryStats.csvs
cd(data_path)

% Get subject IDs
dirInfo = dir(data_path);
dccids = {dirInfo([dirInfo.isdir] & ~ismember({dirInfo.name}, {'.','..'})).name};

% Initialize outputs
RS_power = [];
MMN_ERP = [];
FACE_ERP = [];
VEP_ERP = [];

% list files for each task
datafile_names=dir(fullfile(data_path, '**\*SummaryStats.csv'));
datafile_names=datafile_names(~ismember({datafile_names.name},{'.', '..', '.DS_Store'}));
datafile_names_RS=datafile_names((contains({datafile_names.name}, 'RS')));
RS_names = {datafile_names_RS.name};
RS_path = {datafile_names_RS.folder};
datafile_names_MMN=datafile_names((contains({datafile_names.name}, 'MMN')));
MMN_names = {datafile_names_MMN.name};
MMN_path = {datafile_names_MMN.folder};
datafile_names_FACE=datafile_names((contains({datafile_names.name}, 'FACE')));
FACE_names = {datafile_names_FACE.name};
FACE_path = {datafile_names_FACE.folder};
datafile_names_VEP=datafile_names((contains({datafile_names.name}, 'VEP')));
VEP_names = {datafile_names_VEP.name};
VEP_path = {datafile_names_VEP.folder};

% Loop over each ID

% RS
for i = 1:length(RS_names)
    x = RS_names{i};
    RS_power_file = fullfile([RS_path{i} filesep x]);
    x = extractBefore(x, '_ses');
    if isfile(RS_power_file)
        RS_power_sheet = readtable(RS_power_file);
        if height(RS_power_sheet) > 0
            RS_power_sheet.Properties.VariableNames(2:3) = {'SME_oz', 'Mean_Power_oz'};
            RS_power_sheet.ID = repmat({x}, height(RS_power_sheet), 1);
            RS_power = [RS_power; RS_power_sheet];
            disp(['Compiling RS: ' x]);
        end
    else
        disp(['RS Power file not found for ' x]);
    end
end

% MMN
for i = 1:length(MMN_names)
    x = MMN_names{i};
    MMN_ERP_file = fullfile([MMN_path{i} filesep x]);
    x = extractBefore(x, '_ses');
    if isfile(MMN_ERP_file)
        MMN_ERP_sheet = readtable(MMN_ERP_file);
        if height(MMN_ERP_sheet) > 0
            MMN_ERP_sheet.ID = repmat({x}, height(MMN_ERP_sheet), 1);
            new_names = {
                'SME_MMR_t7t8', 'MeanAmp_MMR_t7t8', ...
                'SME_MMR_f7f8', 'MeanAmp_MMR_f7f8', ...
                'SME_MMR_fcz', 'MeanAmp_MMR_fcz'
            };
            MMN_ERP_sheet.Properties.VariableNames(1:6) = new_names;
            MMN_ERP = [MMN_ERP; MMN_ERP_sheet];
            disp(['Compiling MMN: ' x]);
        end
    else
        disp(['MMN ERP file not found for ' x]);
    end
end


% FACE
for i = 1:length(FACE_names)
    x = FACE_names{i};
    FACE_ERP_file = fullfile([FACE_path{i} filesep x]);
    x = extractBefore(x, '_ses');
    if isfile(FACE_ERP_file)
        FACE_ERP_sheet = readtable(FACE_ERP_file);
        if height(FACE_ERP_sheet) > 0
            FACE_ERP_sheet.ID = repmat({x}, height(FACE_ERP_sheet), 1);
            new_names = {
                'SME_N290_p8', 'MeanAmp_N290_p8', ...
                'SME_N290_p7', 'MeanAmp_N290_p7', ...
                'SME_P1', 'MeanAmp_P1', ...
                'SME_N290_Oz', 'MeanAmp_N290_Oz', ...
                'SME_P400', 'MeanAmp_P400', ...
                'SME_Nc', 'MeanAmp_Nc'
            };
            FACE_ERP_sheet.Properties.VariableNames(3:14) = new_names;
            FACE_ERP = [FACE_ERP; FACE_ERP_sheet];
            disp(['Compiling FACE: ' x]);
        end
    else
        disp(['FACE ERP file not found for ' x]);
    end
end

% VEP
for i = 1:length(VEP_names)
    x = VEP_names{i};
    VEP_ERP_file = fullfile([VEP_path{i} filesep x]);
    x = extractBefore(x, '_ses');
    if isfile(VEP_ERP_file)
        VEP_ERP_sheet = readtable(VEP_ERP_file);
        if height(VEP_ERP_sheet) > 0
            VEP_ERP_sheet.ID = repmat({x}, height(VEP_ERP_sheet), 1);
            new_names = {
                'SME_N1', 'Peak_N1', 'Latency_N1', 'MeanAmp_N1', ...
                'SME_P1', 'Peak_P1', 'Latency_P1', 'MeanAmp_P1', ...
                'SME_N2', 'Peak_N2', 'Latency_N2', 'MeanAmp_N2'
            };
            VEP_ERP_sheet.Properties.VariableNames(3:14) = new_names;
            VEP_ERP = [VEP_ERP; VEP_ERP_sheet];
            disp(['Compiling VEP: ' x]);
        end
    else
        disp(['VEP ERP file not found for ' x]);
    end
end


% Save .csv outputs 
st = datestr(now, 'yyyy-mm-dd');

% only write out specified tasks
for c=length(set_names):-1:1
    task = extractBetween(set_names{c}, 'task-', '_acq');
    if ~contains(task_list, task)
        %remove the file
        datafile_names(c) = [];
    end
end
if contains(tas)
writetable(RS_power, fullfile(concat_location, ['RS_power_V03_' st '.csv']));
writetable(MMN_ERP, fullfile(concat_location, ['MMN_ERP_V03_' st '.csv']));
writetable(FACE_ERP, fullfile(concat_location, ['FACE_ERP_V03_' st '.csv']));
writetable(VEP_ERP, fullfile(concat_location, ['VEP_ERP_V03_' st '.csv']));